/******************************************
*Student name: shir sabo
*Student ID:206481665
*Submit Info:saboshi1
*Exercise name: ex6
******************************************/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#define MAX_USER_NAME 10
#define MIN_USER_NAME 3
#define MAX_PASSWORD 15
#define MIN_PASSWORD 3
enum hobbies { BASEBALL = 1, BASKETBALL, BICYCLE, BOOKS, DRAWING, GYM, MOVIES, POETRY };

typedef struct
{
	char userid[10];
	char* firstname;
	char* lastname;
	char* age;
	char gender;
	char* username;
	char* password;
	unsigned char hobbies;
	char* description;
}user;

typedef struct
{
	user*data;
	struct node* next;
}node;

node* FindPlace(char *new_last_name, node* head);
void readFile(user*** males, user**females, node** head,int*malescounter);
user* AddUser(user*** males, node** head,int* malescounter);
user* LogIn(user** malesptr, node* head,int * flag, int malescounter);
user* CheckWomen(node* head,char* password, char*username);
user* CheckMen(user**malesptr, char*password,char*username,int malescounter);
void DeleteUser(user*account, user***malesptr, node**head,int* malescounter);
void FindMatch(user*account, user**malesptr, node**head, int malescounter);
void PrintHobbies(unsigned char hobbies);
int StringToDecimal(char* age);
int CheckHobbies(unsigned char current, unsigned char account);

void output(user**malesptr, node*head,int malescounter) {
	FILE* fpointer;
	fpointer = fopen("output.txt", "w");
	int i;
	if (fpointer == NULL)
	{
		exit(1);
	}
 //males
	for (i = 0; i < malescounter; i++)
	{
		fprintf(fpointer, "%s", malesptr[i]->userid);
		fprintf(fpointer, ";");
		fprintf(fpointer, "%s", malesptr[i]->firstname);
		fprintf(fpointer, ";");
		fprintf(fpointer, "%s", malesptr[i]->lastname);
		fprintf(fpointer, ";");
		fprintf(fpointer, "%s", malesptr[i]->age);
		fprintf(fpointer, ";");
		fputc(malesptr[i]->gender, fpointer);
		fprintf(fpointer, ";");
		fprintf(fpointer, "%s", malesptr[i]->username);
		fprintf(fpointer, ";");
		fprintf(fpointer, "%s", malesptr[i]->password);
		fprintf(fpointer, ";");
		int mask = 1;
		int counter = 0;
		int j = 1;
		for (j = 1; j <= 8; j++)
		{
			if (mask & (malesptr[i]->hobbies))
			{
				switch (j)
				{
				case BASEBALL:
					fprintf(fpointer, "1");
					counter++;

					break;
				case BASKETBALL:
					fprintf(fpointer, "2");
					counter++;
					break;
				case BICYCLE:
					fprintf(fpointer, "3");
					counter++;
					break;
				case BOOKS:
					fprintf(fpointer, "4");
					counter++;
					break;
				case DRAWING:
					fprintf(fpointer, "5");
					counter++;
					break;
				case GYM:
					fprintf(fpointer, "6");
					counter++;
					break;
				case MOVIES:
					fprintf(fpointer, "7");
					counter++;
					break;
				case POETRY:
					fprintf(fpointer, "8");
					counter++;
					break;

				}
				if (counter != 4)
				{
					fprintf(fpointer, ",");
				}

			}

			mask <<= 1;
		}
		fprintf(fpointer, ";");
		fprintf(fpointer, "%s", malesptr[i]->description);
		fprintf(fpointer, "\n");
	}
		//females
		node* current = head;  // Initialize current 
		while (current != NULL)
		{
			fprintf(fpointer, "%s", current->data->userid);
			fprintf(fpointer, ";");
			fprintf(fpointer, "%s", current->data->firstname);
			fprintf(fpointer, ";");
			fprintf(fpointer, "%s", current->data->lastname);
			fprintf(fpointer, ";");
			fprintf(fpointer, "%s", current->data->age);
			fprintf(fpointer, ";");
			fputc(current->data->gender, fpointer);
			fprintf(fpointer, ";");
			fprintf(fpointer, "%s", current->data->username);
			fprintf(fpointer, ";");
			fprintf(fpointer, "%s", current->data->password);
			fprintf(fpointer, ";");
			int mask = 1;
			int counter = 0;
			int j = 1;
			for (j = 1; j <= 8; j++)
			{
				if (mask & (current->data->hobbies))
				{
					switch (j)
					{
					case BASEBALL:
						fprintf(fpointer, "1");
						counter++;

						break;
					case BASKETBALL:
						fprintf(fpointer, "2");
						counter++;
						break;
					case BICYCLE:
						fprintf(fpointer, "3");
						counter++;
						break;
					case BOOKS:
						fprintf(fpointer, "4");
						counter++;
						break;
					case DRAWING:
						fprintf(fpointer, "5");
						counter++;
						break;
					case GYM:
						fprintf(fpointer, "6");
						counter++;
						break;
					case MOVIES:
						fprintf(fpointer, "7");
						counter++;
						break;
					case POETRY:
						fprintf(fpointer, "8");
						counter++;
						break;

					}
					if (counter != 4)
					{
						fprintf(fpointer, ",");
					}

				}

				mask <<= 1;
			}
			fprintf(fpointer, ";");
			fprintf(fpointer, "%s", current->data->description);
			fprintf(fpointer, "\n");
			current = current->next;
		}
		fclose(fpointer);
	}
	

void PrintHobbies(unsigned char hobbies) {
	int mask = 1;
	int counter = 0;
	int i;
	for (i = 1; i <= 8; i++) 
	{
		if (mask & hobbies)
		{
			switch (i)
			{
			case BASEBALL:
					printf(" Baseball");
					counter++;
				
				break;
			case BASKETBALL:
				printf(" Basketball");
				counter++;
				break;
			case BICYCLE:
				printf(" Bicycle");
				counter++;
				break;
			case BOOKS:
				printf(" Books");
				counter++;
				break;
			case DRAWING:
				printf(" Drawing");
				counter++;
				break;
			case GYM:
				printf(" Gym");
				counter++;
				break;
			case MOVIES:
				printf(" Movies");
				counter++;
				break;
			case POETRY:
				printf(" Poetry");
				counter++;
				break;

			}
			if (counter !=4)
			{
				printf(",");
			}
				
		}

		mask <<= 1;
	}
}
int StringToDecimal(char* age) {
	int a;
	int b;
	if (strlen(age) == 3)
	{
		return 100;//maximum age
	}
	else
	{
		//in order to get to the decimal value
		a = age[0] - '0';
		b = age[1] - '0';
		return (10 * a) + b;
	}
}
int CheckHobbies(unsigned char current,unsigned char account) {
	int counter = 0;
	int mask = 1;
	int i;
	for (i = 1; i <= 8; i++) {
		if (((mask & current)!=0) && ((mask & account)!=0))
		{
			counter++;
		 }
		mask <<= 1;
		if (counter == 2) {
			return 1;
		}
		
	}
	return 0;
}
void FindMatch(user*account, user**malesptr, node**head, int malescounter) {
	int MinimumAge;
	int MaxAge;
	char dummy;
	int i;
	printf("Please choose ages range:\n");
	scanf("%d%c%d", &MinimumAge, &dummy, &MaxAge);
	if (account->gender == 'M')
	{
		node* current = *head;  // Initialize current 
		while (current != NULL)
		{
			if ((StringToDecimal(current->data->age) >= MinimumAge) && (StringToDecimal(current->data->age) <= MaxAge))
			{
				if (CheckHobbies(current->data->hobbies, account->hobbies)) {
					printf("Name:%s %s Age: %s Hobbies: "
						, current->data->firstname, current->data->lastname, current->data->age);
					PrintHobbies(current->data->hobbies);
					printf("\n");
					printf("Description: %s\n", current->data->description);
					printf("\n");
				}
			}
			current = current->next;
		}
		return;
	}
	else if (account->gender == 'F')
	{
		for (i = 0; i < malescounter; i++)
		{
			if ((StringToDecimal(malesptr[i]->age) >= MinimumAge) && (StringToDecimal(malesptr[i]->age) <= MaxAge))
			{
				if (CheckHobbies(malesptr[i]->hobbies, account->hobbies))
				{
					printf("Name:%s %s Age: %s Hobbies: "
						, malesptr[i]->firstname, malesptr[i]->lastname, malesptr[i]->age);
					PrintHobbies(malesptr[i]->hobbies);
					printf("\n");
					printf("Description: %s\n", malesptr[i]->description);
					printf("\n");

				}

			}
		}
	}
}
void DeleteUser(user*account, user***malesptr, node**head,int* malescounter) {
	int i;
	if (account->gender == 'F')
	{
		// Store head node 
		 node* temp = *head;
		 node* prev = NULL;
		// If head node itself holds the username to be deleted 
		if ((temp != NULL) && (strcmp(temp->data->username,account->username)==0))
		{
			*head = temp->next;   // the head of the linked list is changed
			free(temp);               // free old head 
			return;
		}
			// Search for the key to be deleted
			//each iteration we movee forward
		while ((temp != NULL) && (strcmp(temp->data->username, account->username) != 0))
		{
			prev = temp;
			temp = temp->next;
		}

		// If username was not present in linked list 
		if (temp == NULL) return;

		// Unlink the node from linked list 
		//now the previouse node is linked to the next node that will be deleted
		prev->next = temp->next;

		free(temp);  // Free memory

	}
	else if (account->gender == 'M')
	{
		for (i = 0; i < *malescounter; i++)
			if (*(*malesptr + i)==account)
				break;

		// If x found in array 
		if (i < *malescounter)
		{
			// reduce size of array and move all 
			// elements on space ahead 
			*malescounter = *malescounter - 1;//there is a male who wants to be deleted
			for (int j = i; j < *malescounter; j++) {
				*(*malesptr + j) = *(*malesptr + (j + 1));
			}
				
			*malesptr = (user**)realloc(*malesptr, (*malescounter) * sizeof(user*));//frees one cell in the array
			if (*malesptr == NULL) {
				exit(1);

			}
		}

	}
}

void MainMenu(user* account, user*** malesptr,node** head,int* malescounter) {
	int option = 0;
	while ((option != 2) && (option != 3))
	{
		printf("please choose an option:\n");
		printf("1 - Find a match\n");
		printf("2 - found love, DELETE me\n");
		printf("3 - Log out\n");
		scanf("%d", &option);
		switch (option)
		{
		case 1:
			FindMatch(account, *malesptr, head,*malescounter);
			break;
		case 2:
			DeleteUser(account,malesptr,head,malescounter);
			break;
		case 3:

			return;
			
		default:
			continue;

		}
	}

}
void hobbies(char* hobbies) {
	int index = 0;
	while ((hobbies[index]!='\0'))
	{
		if (hobbies[index] == ' ') {
			hobbies[index] = ',';
		}
		if (hobbies[index] == '\n') {
			hobbies[index] = '\0';
			return;
		}
			index++;
		
	}
}
user* CheckWomen(node* head,char* password,char*username) {
	 node* current = head;  // Initialize current 
	while (current != NULL)
	{
		if (strcmp(current->data->username, username) == 0)
		{
			return current->data;
		}
		current = current->next;
	}
	return NULL;
}
user* CheckMen(user**malesptr, char*password, char*username,int malescounter) {
	int i;

	for (i = 0; i < malescounter; i++) {
		if (strcmp(malesptr[i]->username, username) == 0)
		{
			return malesptr[i];
		}

	}
	return NULL;


}

user* LogIn(user** malesptr, node* head, int *flag,int malescounter)
{
	user** PointerToMale = malesptr;
	node* HeadToWomen = head;
	char username[MAX_USER_NAME+1];
	char password[MAX_PASSWORD+1];
	user* existwomen;
	user* existmen;
	int i;
	printf("Please enter your username:\n");
	scanf("%s", username);
	existwomen=CheckWomen(HeadToWomen, password, username);
	if (existwomen != NULL)
	{	printf("Please enter your password:\n");
		scanf("%s", password);
		if (strcmp(existwomen->password, password) == 0)
		{
			*flag = 0;
			return existwomen;
		}
		else {
			printf("Bad password\n");
			return NULL;
		}
	}
	else {
		existmen=CheckMen(PointerToMale, password, username,malescounter);
		if (existmen != NULL)
		{
			printf("Please enter your password:\n");
			scanf("%s", password);
			if (strcmp(existmen->password, password) == 0)
			{
				return existmen;
			}
			else {
				printf("Bad password\n");
				return NULL;
			}
		}
		else {
			if (*flag == 0)
			{
				printf("user do not exist please try again\n");
			}
			*flag = 1;
			return NULL;
		}
		
	}
}
user* AddUser(user*** males, node** head,int* malescounter) {
	user* newuser;
	char buffer[300];
	int data;
	int index = 0;
	char dummy;
	newuser= (user*)(malloc(sizeof(user)));
	node* after;
	user** temp;
	int k;
	unsigned char MaskHobbies;
	if (newuser == NULL)
	{
		exit(1);
	}

	for (data = 0; data <= 9; data++)
	{

		switch (data)

		{
		case 0:
			printf("Please enter your ID:\n");
			scanf("%s", buffer);
			strcpy(newuser->userid, buffer);
			break;

		case 2:
			printf("Please enter your first name:\n");
			scanf("%s", buffer);
			newuser->firstname = (char*)malloc(sizeof(char)*(strlen(buffer)));
			strcpy(newuser->firstname, buffer);
			break;

		case 3:
			printf("Please enter your last name:\n");
			scanf("%s", buffer);
			newuser->lastname = (char*)malloc(sizeof(char)*(strlen(buffer)));
			strcpy(newuser->lastname, buffer);
			break;
		case 4:
			printf("Please enter your age (18 to 100):\n");
			scanf("%s", buffer);
			newuser->age = (char*)malloc(sizeof(char)*(strlen(buffer)));
			strcpy(newuser->age, buffer);
			break;
		case 5:
			printf("Please enter your gender (F-female, M-male):\n");
			scanf("%s", buffer);
			newuser->gender = buffer[0];
			break;
		case 6:
			printf("Choose a username(3 - 10 characters):\n");
			scanf("%s", buffer);
			newuser->username = (char*)malloc(sizeof(char)*(strlen(buffer)));
			strcpy(newuser->username, buffer);
			break;
		case 7:
			printf("please choose 4 hobbies: Baseball = 1, Basketball = 2, Bicycle = 3, Books = 4, Drawing = 5, Gym = 6, Movies = 7, Poetry = 8\n");
			scanf("%c", &dummy);//gets the enter
			fgets (buffer,8,stdin);
			hobbies(buffer);
			newuser->hobbies = 0;
			for (k = 0; k < 7; k += 2)
			{
				MaskHobbies = 1;
				while (buffer[k] != '1')
				{
					MaskHobbies <<= 1;
					buffer[k] -= 1;
				}
				newuser->hobbies ^= MaskHobbies;
			}
			printf("%d\n", newuser->hobbies);
			break;
		case 8:
			printf("Choose a password (attention-minimum 3 characters):\n");
			scanf("%s",buffer );
			newuser->password = (char*)malloc(sizeof(char)*(strlen(buffer)));
			strcpy(newuser->password, buffer);

			break;
		case 9:
			printf("Some words about yourself\n");
			//scanf("%s", buffer);
			//gets the enter
			scanf("%c", &dummy);
			fgets(buffer, 212, stdin);
			//change the'/n' to'\0'
			buffer[strlen(buffer) - 1] = '\0';
			newuser->description = (char*)malloc(sizeof(char)*(strlen(buffer)));
			strcpy(newuser->description, buffer);

			break;

		}
	}
	if (newuser->gender == 'F')
	{
		node *new_entry = (node *)malloc(sizeof(node));
		if (NULL == new_entry) {
			exit(1);
		}
		new_entry->data = newuser;//conects the data to the struct user
		after = FindPlace(new_entry->data->lastname, *head);
		if (NULL == after) {
			if (NULL == *head) {
				new_entry->next = NULL;
			}
			else
			{
				new_entry->next = *head;
			}
			*head = new_entry;
		}
		else    // add it in the middle
		{
			new_entry->next = after->next;
			after->next = new_entry;
		}
		
		return newuser;
	}
	else if((newuser->gender == 'M'))
	{
		*malescounter = *malescounter + 1;
		temp = *males;
		*males = (user**)realloc(temp, (*malescounter) * sizeof(user*));
		if (*males == NULL) {
			exit(1);

		}

		*(*males + *malescounter - 1) = newuser;
		return newuser;
	}
}
node*FindPlace(char *new_last_name, node* head) {

	node *prev = NULL;
	node *current = head;
	while (current != NULL) {
		if (strcmp(new_last_name, current->data->lastname) < 0) {
			break;
		}

		prev = current;
		current = current->next;
	}

	return prev;
}
void readFile(user*** males, user**females,node** head,int* malescounter){

	int c;
	int i;
	int j;
	int info;
	int* ptr_id;
	int* ptr_name;
	int* ptr_family;
	FILE* fpointer;
	char str[300];
	int strIndex;
	user* ptr;
	user** pointer;
	int pointer_index;
	user** temp=NULL;
	node* after;
	int k = 0;
	unsigned char MaskHobbies;
	
	fpointer = fopen("input.txt", "r");
	if (fpointer == NULL)
	{
		exit(1);
	}

	// Start reading from the file - read the fist char in the line
	strIndex = 0;
	str[strIndex] = '0';
	//str[strIndex] = fgetc(fpointer);
	
	while (1)
	{
		ptr = (user*)(malloc(sizeof(user)));
		if (ptr == NULL)
		{
			exit(1);
		}
		for (info = 0 ,pointer_index=0; info <= 8; info++, pointer_index++)
		{
			strIndex = -1;
			while (str[strIndex] != ';' && str[strIndex] != '\n')
			{
				strIndex++;
				str[strIndex] = fgetc(fpointer);
				if (str[strIndex] == EOF)
				{
					return;
				}
				
			}
			str[strIndex] = '\0';
			switch (info)
			{


			case 0:
				strcpy(ptr->userid, str);
				break;
			case 1:
				ptr->firstname = (char*)malloc(sizeof(char)*(strlen(str)));
				if (ptr->firstname == NULL) {
					exit(1);

				}
				strcpy(ptr->firstname, str);
				break;
			case 2:
				ptr->lastname = (char*)malloc(sizeof(char)*(strlen(str)));
				if (ptr->lastname == NULL) {
					exit(1);

				}
				strcpy(ptr->lastname, str);
				break;
			case 3:
				ptr->age = (char*)malloc(sizeof(char)*(strlen(str)));
				if (ptr->age == NULL) {
					exit(1);

				}
				strcpy(ptr->age, str);
				break;
			case 4:
				ptr->gender = str[0];
				break;
			case 5:
				ptr->username = (char*)malloc(sizeof(char)*(strlen(str)));
				if (ptr->username == NULL) {
					exit(1);

				}
				strcpy(ptr->username, str);
				break;
			case 6:
				ptr->password = (char*)malloc(sizeof(char)*(strlen(str)));
				if (ptr->password == NULL) {
					exit(1);

				}
				strcpy(ptr->password, str);
				break;

			case 7:
				
				ptr->hobbies = 0;
				for (k = 0; k < 7; k += 2)
				{
					MaskHobbies = 1;
					while (str[k] != '1')
					{
						MaskHobbies <<= 1;
						str[k] -= 1;
					}
					ptr->hobbies ^= MaskHobbies;
					
				}
				printf("%d\n", ptr->hobbies);
				break;

			case 8:
				
				ptr->description = (char*)malloc(sizeof(char)*(strlen(str)));
				if (ptr->description == NULL) {
					exit(1);

				}
				strcpy(ptr->description, str);
				break;
			}
			

		} // finished user
		if (ptr->gender == 'M') {
			*malescounter = *malescounter + 1;
			if (*malescounter == 1) {
				*males = (user**)malloc(sizeof(user*));
				if (*males == NULL) {
					exit(1);

				}
				temp = *males;
			}
			else {
				*males = (user**)realloc(temp, (*malescounter)* sizeof(user*));
				if (*males == NULL) {
					exit(1);

				}

				temp = *males;
			}
			*(*males + *malescounter-1) = ptr;
		}
		if (ptr->gender == 'F') {
			node *new_entry = (node *)malloc(sizeof(node));
			if (NULL == new_entry) {
				exit(1);
			}
			new_entry->data = ptr;//conects the data to the struct user
			after = FindPlace(new_entry->data->lastname, *head);
			if (NULL == after) {
				if (NULL == *head) {
					new_entry->next = NULL;
				}
				else
				{
					new_entry->next = *head;
				}
				*head = new_entry;
			}
			else    // add it in the middle
			{
				new_entry->next = after->next;
				after->next = new_entry;
			}


			}

			

		}
		fclose(fpointer);

	}


int main()
{
	user** malesPtr = NULL;
	user*femalelist = NULL;
	node* head = NULL;
	user* logged;
	user* newmember;
	int malescounter = 0;
	//its value will be changed once in order to check if the username inserted does not exist.
	int indicator = 0;
	 readFile(&malesPtr, &femalelist, &head,&malescounter);//by adress
	 printf("%s\n", (*malesPtr)->firstname);
	 printf("%s\n", (*(malesPtr+1))->firstname);
	 printf("%s\n", (*(malesPtr + 2))->firstname);


	 printf("succes\n");
	int option = 0;
	while (option != 3)
	{
		printf("Welcome! please choose an option\n");
		printf("1 - Log in\n");
		printf("2 - New member\n");
		printf("3 - Exit \n");
		scanf("%d", &option);
		switch (option) {

		case 1:
			logged = LogIn(malesPtr, head, &indicator, malescounter);//the pointers are sent by adress because we dont want to change them.
			if (indicator == 1) {
				logged = LogIn(malesPtr, head, &indicator, malescounter);
				if (logged != NULL)
				{
					printf("Hello %s\n", logged->username);
					MainMenu(logged,&malesPtr,&head,&malescounter);
				}
				else
				{
					continue;
				}
			}
			else if (logged != NULL)
			{
				printf("Hello %s\n", logged->username);
				MainMenu(logged, &malesPtr, &head, &malescounter);

			}

			break;
		case 2:

			newmember = AddUser(&(malesPtr), &(head), &(malescounter));
			printf("Hi %s,lets find love!\n", newmember->firstname);
			MainMenu(newmember,&malesPtr,&head,&malescounter);

			break;
		case 3:
			output(malesPtr,head,malescounter);
			break;
		default:
			printf("Bad choice, please try again\n");
		}
		/*if (option == 1)
		{

			logged=LogIn(malesPtr,head,&indicator,malescounter);//the pointers are sent by adress because we dont want to change them.
			if (indicator == 1) {
				logged = LogIn(malesPtr, head, &indicator,malescounter);
				if (logged != NULL)
				{
					printf("Hello %s\n", logged->username);
					MainMenu(logged);
				}
				else
				{
					continue;
				}
			}
			else if (logged != NULL)
			{
				printf("Hello %s\n", logged->username);


			}

		}
		else if (option == 2)
		{
			user* newmember=AddUser(&(malesPtr),&(head),&(malescounter));
			printf("Hi %s,lets find love!\n", newmember->firstname);

		}
		else if (option == 3)
		{
			exit(1);

		}
		else
		{
			printf("Bad choice, please try again\n");

		}

	}*/
	}
	return 0;
}

